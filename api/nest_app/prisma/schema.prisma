generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Cycle {
  id              Int      @id @default(autoincrement())
  name            String
  about           String?
  goal            String
  userId          Int
  favorite        Boolean  @default(false)
  watchFromAnyone Boolean  @default(false)
  erased          Boolean  @default(false)
  suspend         Boolean  @default(false)
  actions         Action[]
  checks          Check[]
  dos             Do[]
  plans           Plan[]
  tasks           Task[]
}

model Plan {
  cycleId     Int
  round       Int     @default(1)
  goalInRound String?
  complete    Boolean @default(false)
  cycle       Cycle   @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@id([cycleId, round])
}

model Do {
  cycleId  Int
  round    Int     @default(1)
  complete Boolean @default(false)
  cycle    Cycle   @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@id([cycleId, round])
}

model Check {
  cycleId  Int
  round    Int     @default(1)
  complete Boolean @default(false)
  cycle    Cycle   @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@id([cycleId, round])
}

model Action {
  cycleId  Int
  round    Int     @default(1)
  complete Boolean @default(false)
  cycle    Cycle   @relation(fields: [cycleId], references: [id], onDelete: Cascade)

  @@id([cycleId, round])
}

model Task {
  id        Int       @id @default(autoincrement())
  name      String
  cycleId   Int
  round     Int       @default(1)
  about     String?
  statusId  Int       @default(0)
  startDate DateTime?
  endDate   DateTime?
  cycle     Cycle     @relation(fields: [cycleId], references: [id], onDelete: Cascade)
  status    Status    @relation(fields: [statusId], references: [id], onDelete: Cascade)
}

model Status {
  id    Int    @id
  name  String
  tasks Task[]
}
